"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    hello: String!
    greet(name: String!): String
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
    allusers: [User!]! @all 

    posts: [Post!]! @paginate(type: "paginator" model: "App\\Post")
    post(id: ID @eq): Post @find(model: "App\\Post")

    comment(id: ID @eq): Comment @find(model: "App\\Comment")

    me: User @middleware(checks:["auth:api"]) @auth
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Post {
    id: ID!
    title: String!
    content: String!
    author: User! @belongsTo
    comments: [Comment] @hasMany
}

type Comment {
    id: ID!
    reply: String!
}


type Mutation {
    # User
    createUser(
        name: String! @rules(apply: ["required", "min:2"]),
        email: String! @rules(apply: ["email", "unique:users"]),
        password: String! @rules(apply: ["min: 4"]) @bcrypt
    ): User! @create


    updateUser(
        id: ID!,
        name: String! @rules(apply: ["required", "min:2"]),
        email: String! @rules(apply: ["email", "unique:users"]),
        password: String! @rules(apply: ["min: 4"]) @bcrypt
    ): User! @update

    deleteUser(id: ID!): User! @delete

    # Post
    createPost(
        user_id: Int!, 
        title: String! @rules(apply: ["required", "min:4", "max:50"]),
        content: String! @rules(apply: ["required", "min:4", "max:300"])
    ): Post! @create

    # Comment
    createComment(
        post_id: Int!, 
        reply: String! @rules(apply: ["required", "min:4", "max:100"])
    ): Comment! @create
}

